generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DayOfWeek {
  MON
  TUE
  WED
  THU
  FRI
  SAT
}

model Class {
  id             String   @id @default(cuid())
  name           String   @unique
  headTeacherId  String?
  headTeacher    Teacher? @relation("HeadTeacher", fields: [headTeacherId], references: [id])
  lessons        Lesson[]

  @@map("classes")
}

model Teacher {
  id            String   @id @default(cuid())
  name          String
  email         String?  @unique
  headOfClasses Class[]  @relation("HeadTeacher")
  lessons       Lesson[]

  @@map("teachers")
}

model Subject {
  id      String  @id @default(cuid())
  name    String  @unique
  code    String? @unique
  lessons Lesson[]

  @@map("subjects")
}

model Lesson {
  id           String     @id @default(cuid())
  classId      String
  class        Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacherId    String?
  teacher      Teacher?   @relation(fields: [teacherId], references: [id])
  day          DayOfWeek
  lessonNumber Int
  subject      String
  subjectId    String?
  subjectRef   Subject?   @relation(fields: [subjectId], references: [id])
  room         String

  @@unique([classId, day, lessonNumber])
  @@map("lessons")
}

// Auth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          Int       @default(0)
  accounts      Account[]
  sessions      Session[]
  events        Event[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime @db.Date
  createdById String?
  createdBy   User?    @relation(fields: [createdById], references: [id])

  @@index([date])
  @@map("events")
}
